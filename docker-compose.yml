services:
  postgres:
    image: postgres:17.5
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:9.0
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "${PGADMIN_PORT}:80"

  server:
    build: ./server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGHOST: postgres
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
      PGPORT: ${PGPORT}
      SERVER_PORT: ${SERVER_PORT}
    networks:
      - backend
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules  # Prevents overwriting node_modules
    command: nodemon src/index.js

  client:
    build: ./client
    depends_on:
      - server
    networks:
      - backend
    ports:
      - "${CLIENT_PORT_HOST}:5173"
    environment:
      VITE_HOST: "0.0.0.0"
    volumes:
      - ./client:/app
      - /app/node_modules  # Prevents overwriting node_modules
    command: npm run dev

volumes:
  pgdata:

    


networks:
  backend:
    driver: bridge